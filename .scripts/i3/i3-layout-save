#!/bin/bash

set -x

LAYOUT_FILE=$1
CRITERION=$2

LAYOUT_PATH="${HOME}/.config/i3layouts"
# get current workspace ID
WORKSPACE_ID=$(i3-msg -t get_workspaces \
    | jq '.[] | select(.focused==true).num' \
    | cut -d"\"" -f2)

ALL_WS_FILE=$LAYOUT_PATH/all-layouts.json

CURRENT_MONITOR=$(i3-msg -t get_workspaces \
    | jq '.[] | select(.focused==true).output' \
    | cut -d"\"" -f2)

# get the i3-tree for all workspaces for the current monitor
i3-save-tree --output "$CURRENT_MONITOR" > "$ALL_WS_FILE" 2>&1

# get the i3-tree for the current workspace
i3-save-tree --workspace "$WORKSPACE_ID" > "$LAYOUT_FILE" 2>&1

# for debug
# cp $LAYOUT_FILE $LAYOUT_PATH/ws_temp.txt
# cp $ALL_WS_FILE $LAYOUT_PATH/all_temp.txt

# back the output file.. we are gonna modify it and alter we will need it back
BACKUP_FILE=$LAYOUT_PATH/.layout_backup.txt
cp "$LAYOUT_FILE" "$BACKUP_FILE"

# get me vim, we will be using it alot to postprocess the generated json files
# nvim doesn't work
if [ -x "$(whereis vim | awk '{print $2}')" ]; then
    VIM_BIN="$(whereis vim | awk '{print $2}')"
    GOT_VIM=true
fi
# elif [ -x "$(whereis nvim | awk '{print $2}')" ]; then
#     VIM_BIN="$(whereis nvim | awk '{print $2}')"
#     HEADLESS="--headless"
#     GOT_NVIM=true
# fi

# the allaround task is to produce a single json file with the description
# of the current layout on the focused workspace. However, the
#                                     i3-save-tree --workspace
# command only outputs the inner containers, without wrapping them into the
# root container of the workspace, which leads to loosing the information
# about the initial split .. vertical? or horizontal?...
# We can solve it by asking for a tree, which contains all workspaces,
# including the root splits and borrowing the root split info from there.
# I do it by locating the right place in the all-tree by mathing the
# workspace tree and then extracting the split part and adding it back
# to the workspace json.

# first we need to do some preprocessing, before we can find, where in the
# all-tree file we can find the workspace part.

# remove the floating window part, that would screw up out matching
if [ -n "$GOT_VIM" ]; then
    $VIM_BIN -nEs -u NONE -c '%g/floating_con/norm [{d%' -c "wqa" -- "$LAYOUT_FILE"
else
    # when scripting d% to delete to the next in pair, it actually leaves one of
    # the pair characters there
    $VIM_BIN -nEs -u NONE -c '%g/floating_con/norm [{d%dd' -c "wqa" -- "$LAYOUT_FILE"
fi

# remove comments
$VIM_BIN -nEs -u NONE -c '%g/\/\//norm dd' -c "wqa" -- "$LAYOUT_FILE"
$VIM_BIN -nEs -u NONE -c '%g/\/\//norm dd' -c "wqa" -- "$ALL_WS_FILE"

# remove indents
$VIM_BIN -nEs -u NONE -c '%g/^/norm 0d^' -c "wqa" -- "$LAYOUT_FILE"
$VIM_BIN -nEs -u NONE -c '%g/^/norm 0d^' -c "wqa" -- "$ALL_WS_FILE"

# remove commas
$VIM_BIN -nEs -u NONE -c '%s/^},$/}/g' -c "wqa" -- "$LAYOUT_FILE"
$VIM_BIN -nEs -u NONE -c '%s/^},$/}/g' -c "wqa" -- "$ALL_WS_FILE"

# remove empty lines in the the workspace file
$VIM_BIN -nEs -u NONE -c '%g/^$/norm dd' -c "wqa" -- "$LAYOUT_FILE"

# now I will try to find the part in the big file which containts the
# small file. I have not found a suitable solution using off-the-shelf
# tools, so custom bash it is...

PATTERN_LINES=$(cat "$LAYOUT_FILE" | wc -l) # the number of lines in the small file
SOURCE_LINES=$(cat "$ALL_WS_FILE" | wc -l) # the number of lines in the big file

N_ITER=$((SOURCE_LINES - PATTERN_LINES))
readarray pattern < "$LAYOUT_FILE"

MATCH_LINE=0
for ((a = 1; a - N_ITER; a = a + 1)); do

    CURR_LINE=0
    MATCHED_LINES=0
    while read -r line1; do

        PATTERN_LINE=$(echo "${pattern[$CURR_LINE]}" | tr -d '\n')

        if [[ "$line1" == "$PATTERN_LINE" ]]; then
            MATCHED_LINES=$((MATCHED_LINES + 1))
        else
            break
        fi

        CURR_LINE=$((CURR_LINE + 1))
    done <<< "$(cat "$ALL_WS_FILE" | tail -n +"$a")"

    if [[ "$MATCHED_LINES" == "$PATTERN_LINES" ]];
    then
        MATCH_LINE="$a"
        break
    fi
done

# lets extract the key part, containing the block with the root split

# load old workspace file (we destroyed the old one, remember?)
mv "$BACKUP_FILE" "$LAYOUT_FILE"

$VIM_BIN -nEs -u NONE -c '%s/\\\\//g' -c "wqa" -- "$LAYOUT_FILE"

# delete the part below and above the block
$VIM_BIN -nEs -u NONE -c "normal ${MATCH_LINE}ggdGG{kdgg" -c "wqa" -- "$ALL_WS_FILE"
# rename the "workspace to "con" (container)
$VIM_BIN -nEs -u NONE -c '%g/type/norm ^Wlciwcon' -c "wqa" -- "$ALL_WS_FILE"
# change the fullscrean to 0
$VIM_BIN -nEs -u NONE -c '%g/fullscreen/norm ^Wr0' -c "wqa" -- "$ALL_WS_FILE"

# extract the needed part of the file and add it to the workspace file
# this part is mostly according to the i3 manual, except we actually put there
# the information about the split type
cat "$ALL_WS_FILE" | cat - "$LAYOUT_FILE" > /tmp/tmp.txt && mv /tmp/tmp.txt $LAYOUT_FILE
# add closing bracked at the end
$VIM_BIN -nEs -u NONE -c 'normal Go]}' -c "wqa" -- "$LAYOUT_FILE"

# now we have to do some postprocessing on it, all is even advices on the official website
# https://i3wm.org/docs/layout-saving.html

# uncomment the instance swallow rule
if [[ "$CRITERION" = "default" ]]; then
    # uncomment title for terminals (also escape plus sign in regex - need 2 \

    # TODO: this is bullshit!
    # in json, which means need 8 \ in script): 
    $VIM_BIN -nEs -u NONE -c "%g/\\^st\\$/norm jj^dW:s/+/\\\\\\\\+/g" -c "wqa" -- "$LAYOUT_FILE"
    $VIM_BIN -nEs -u NONE -c "%g/\\^st\\$/norm jj^:s/\*/\\\\\\\\*/g" -c "wqa" -- "$LAYOUT_FILE"
    $VIM_BIN -nEs -u NONE -c "%g/\\^st\\$/norm jj^:s/\./\\\\\\\\./g" -c "wqa" -- "$LAYOUT_FILE"
    $VIM_BIN -nEs -u NONE -c "%g/\\^st\\$/norm jj^:s/\\\\\"/\\\\\\\\\\\\\\\\\\\\\"/g" -c "wqa" -- "$LAYOUT_FILE"

    $VIM_BIN -nEs -u NONE -c "%g/instance/norm ^dW" -c "wqa" -- "$LAYOUT_FILE"
elif [[ "$CRITERION" = "any" ]]; then
    $VIM_BIN -nEs -u NONE -c '%g/instance/norm ^dW3f"di"' -c "wqa" -- "$LAYOUT_FILE"
elif [[ "$CRITERION" = "specific" ]]; then

    LAST_LINE=1

    while true; do

        LINE_NUM=$(cat "$LAYOUT_FILE" | tail -n + "$LAST_LINE" | grep '// "class' -n | awk '{print $1}')

        if [ -n "$LINE_NUM" ]; then

            LINE_NUM=$(echo "$LINE_NUM" | awk '{print $1}')
            LINE_NUM=${LINE_NUM%:}
            LINE_NUM=$((LINE_NUM - 1))
            LINE_NUM=$((LINE_NUM + LAST_LINE))

            NAME=$(cat "$LAYOUT_FILE" \
                | sed -n "$((LINE_NUM - 4))p" \
                | awk '{$1="";print $0}')

            SELECTED_OPTION=$(cat -n "$LAYOUT_FILE" \
                | sed -n "${LINE_NUM},$((LINE_NUM + 2))p" \
                | awk '{$2="";print $0}' \
                | dmenu -i -p "Choose the matching method for${NAME%,}" \
                | awk '{print $1}')

            # when user does not select, choose "instance" (class+1)
            if [ -z "$SELECTED_OPTION" ]; then
                SELECTED_OPTION=$((LINE_NUM + 1))
            fi

            $VIM_BIN -nEs -u NONE \
                -c "norm ${SELECTED_OPTION}gg^dW" -c "wqa" -- "$LAYOUT_FILE"

            LAST_LINE=$((SELECTED_OPTION))

        else
            break
        fi

    done
fi

# uncomment the transient_for
$VIM_BIN -nEs -u NONE -c '%g/transient_for/norm ^dW' -c "wqa" -- "$LAYOUT_FILE"

# delete all comments
$VIM_BIN -nEs -u NONE -c '%g/^\s*\/\//norm dd' -c "wqa" -- "$LAYOUT_FILE"

# add a missing comma to the last element of array we just deleted
$VIM_BIN -nEs -u NONE -c '%g/swallows/norm j^%k:s/,$//g' -c "wqa" -- "$LAYOUT_FILE"

# delete all empty lines
$VIM_BIN -nEs -u NONE -c '%g/^$/norm dd' -c "wqa" -- "$LAYOUT_FILE"

# pick up floating containers and move them out of the root container
if [ -n "$GOT_VIM" ]; then
    $VIM_BIN -nEs -u NONE -c '%g/floating_con/norm [{d%GAp' -c "wqa" -- "$LAYOUT_FILE"
else
    # nvim has a bug currently:
    # when scripting d% to delete to the next in pair, it actually leaves one of the pair characters there
    $VIM_BIN -nEs -u NONE -c "%g/floating_con/norm [{%ma%d'aGAp" -c "wqa" -- "$LAYOUT_FILE"
fi

# delete all empty lines
$VIM_BIN -nEs -u NONE -c '%g/^$/norm dd' -c "wqa" -- "$LAYOUT_FILE"

# add missing commas between the newly created inner parts of the root element
$VIM_BIN -nEs -u NONE -c '%s/}\n{/},{/g' -c "wqa" -- "$LAYOUT_FILE"

# surroun everythin in []
$VIM_BIN -nEs -u NONE -c 'normal ggO[Go]' -c "wqa" -- "$LAYOUT_FILE"

# autoformat the file
$VIM_BIN -nEs -u NONE -c 'normal gg=G' -c "wqa" -- "$LAYOUT_FILE"

rm "$ALL_WS_FILE"

notify-send -u low -t 2000 "Layout saved" -h string:x-canonical-private-synchronous:anything
