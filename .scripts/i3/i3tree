#!/usr/bin/env perl

use strict;
use warnings;
use v5.14;
use AnyEvent::I3;
use Data::Dumper;
use List::Util qw(first);


# receive description of the tree
my $tree = i3->get_tree->recv;
my $ws = (first { $_->{'focused'} eq 1} @{i3->get_workspaces->recv})->{'name'};


walk_tree( $tree, 0, 0 );

sub display_node {
    my ( $description, $depth, $focused ) = @_;
    my $margin = "\t" x $depth;
    if ( $focused ) {
        print $margin . "> " . $description . " <" . "\n";
    } else {
        print $margin . $description . "\n";
    }
    return $depth + 1;
}


sub walk_tree {
    my ( $node, $depth, $print ) = @_;

    my $type        = $node->{'type'};
    my $orientation = $node->{'orientation'};
    my $layout      = $node->{'layout'};
    my $name        = $node->{'name'};
    my $focused     = $node->{'focused'};

    # get type and name, for debugging
    # say "$type, $name";

    # if "type" is workspace
    if ( $type eq "workspace" ) {
        if ( $node->{'name'} eq $ws ) {
            $depth = display_node(
                "Workspace $name ($layout - $orientation)", $depth, $focused
            );
            $print = 1
        }
    }

    if ( $print eq 1 ) {
        # if "type" is "con" (type for several kinds of containers)
        if ( $type eq "con" ) {
            # no orientation, so probably a window
            if ( $orientation eq "none" ) {
                # filter out two possible non-windows
                unless ( $name eq "content" or $name =~ "^i3bar" ) {
                    $depth = display_node( "Window $name", $depth, $focused );
                }
            }
            # orientation, so definitely a split container
            else {
                $depth = display_node( "Split ($layout - $orientation)", $depth, $focused );
            }
        }
    }

    foreach ( @{ $node->{'nodes'} } ) {
        walk_tree( $_, $depth, $print );
    }
}

